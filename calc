#!node --experimental-default-type=module
import fs from 'fs';
const { stdin, stdout } = process,
extrarows = stdin.isTTY && process.argv.length === 2 ? 2 : 0;
const w = m => stdout.write(m+'');
const lambdach = `\u03BB`;

const lambda = ((_=(config={ch: '\\',f: t => t}) => {
	const out = s => out.run(out.parse(s)), c = {}, nodes = [];
	const is = {
		l: t => t.pop && t[0] === '',
		a: t => t.pop && t[0] !== '',
		n: t => !!t.toFixed,
		t: t => typeof t === 'string' || !!t.id
	};
	const $ = (l, a, n, x) =>
		(t, f) => (f = $(l, a, n, x), is.l(t) ? l(t, f) : is.a(t) ? a(t, f) : is.n(t) ? n(t, f) : x(t, f));
	const equ = t => $(
		u=>is.l(t)&&equ(t[1])(u[1]),
		u=>is.a(t)&&t.length===u.length&&t.every((_,i)=>equ(t[i])(u[i])),
		u=>t===u,
		u=>t.id&&t.id===u.id||(t.id||u.id)&&equ(unbox(t))(unbox(u))||t===u);
	const addNode = (n => (v, b = []) => {
		const _equ = equ(v);
		const bound = out.bound(v);
		if (is.a(v) && bound.length || is.l(v) && b.length) return v;
		for (const n in nodes) {
			const { iv, v } = nodes[n];
			if (iv && _equ(iv) || _equ(v)) return { id: n|0 };
		}
		const iv = JSON.parse(JSON.stringify(v));
		const e = is.l(v);
		nodes[n] = { ...e ? { e } : { iv }, v };
		return { id: n++ };
	})(1);
	const u = (p, r) => {while (p());return r()};
	const w = f => t => (x => ({ value: x, toString: ex => out.str(x, ex) }))(f(t));
	const box = t => t.id ? t : addNode(t);
	const unbox = t => t.id ? unbox(nodes[t.id].v) : t;
	const nary = t => {
		const ts = [];
		let _t = unbox(t);
		while (_t.pop && t[0] !== '') {
			ts.unshift(unbox(_t[1]));
			_t = unbox(_t[0]);
		}
		let bad = is.a(_t);
		ts.unshift(unbox(_t));
		const _pf = _ => true;
		const it = $((t,f) => ['', f(t[1])],(t,f)=>box(t.map(f)),t=>t,box);
		return it(c.f(n => n + 1 !== ts.length || bad
			? _ => void 0
			: (g,...p) => {
				if (!p.length === 1) p.push(_pf);
				let pf = _pf;
				if (ts.every((x,i) => (pf = (typeof p[i] === 'string' ? x => x === p[i] : p[i]) ?? pf)(x))) {
					let v = g(ts);
					return typeof v === 'number' ? v+'' : v;
				}
			}, ts.length) ?? t);
	};
	out.parse = str => {
		let i = 0;
		const expr = (b, m= (j=i) => u(_ => str[i++]?.match(/[^\s.()]/), _ => str.slice(j, --i))) => {
			const box = t => {
				if (t.length === 1) return t[0];
				let _t = t.splice(0, 2);
				while (t.length) _t = [addNode(_t), t.shift()];
				return addNode(_t);
			};
			const t = []; let x,y;
			while (i < str.length) {
				if (/\s/.test(str[i])) { ++i; continue; }
				switch (str[i]) {
					case '(': ++i; t.push(expr(b)); break;
					case ')': ++i; return box(t);
					case '.': debugger;throw'';
					case c.ch:
						++i,x = [...b],y = 0;
						do {++y;x.unshift(m());while (/\s/.test(str[i])) ++i} while (x[0]);
						x.shift(); --y;
						++i;
						x = expr(x);
						for (let i = 0; i < y; ++i) x = ['', x];
						return box([...t, addNode(x, b)]);
					default:
						y = b.indexOf(x = m(i));
						if (y === -1) y = addNode(x);
						t.push(y);
				}
			}
			return box(t)
		};
		return expr([]);
	};
	out.str = (t, ex) => {
		ex = ex ? t => out.expand(t) : t => t;
		t = ex(t);
		const free = out.free(t);
		let g = 0,x;
		const k=t=>u(_=>free.includes(t=(10+g%26).toString(36)+((g+=1)/26|0||'')),_=>t);
		return $(
			(t, f, s=[]) => u(_=>is.l(unbox(t))&&(s.push(x = k()),t=ex(out.subst(t,x,void 0, _=>_))[1]),
				_=>`(\u03bb${s.join(' ')}. ${f(t)})`),
			(t, f) => u(_=>is.a(unbox(t[0]))&&(t = unbox(unbox(t[0]).concat(t.slice(1)))),_=>`(${t.map(f).join(' ')})`),
			t => `.${t}`,
			(t, f) => {
				const n = nodes[t.id];
				return n ? typeof n.iv === 'string' && isNaN(n.v) ? n.iv : f(n.v) : t;
			})(t);
	};
	out.free = $((t, f)=>f(t[1]), (t, f)=>t.map(f).flat(), _=>[], (t, f)=>t.id?f(nodes[t.id].v):[t]);
	out.bound = t =>
		Array.from(new Set($(_=>[], (t, f)=>t.map(f).flat(), t=>[t], (t, f)=>t.id?f(nodes[t.id].v):[])(t)));
	out.expand = $((t,f)=>t.map(f),(t,f)=>t.map(f), t=>t, (t,f)=>t.id?f(nodes[t.id].v):t);
	out.subst = (t, r, i=-1, b = box) => $(
		t => b(['', out.subst(unbox(t)[1], r, i + 1, b)]),
		(t, f) => b(t.map(f)),
		t => t === i ? r : t,
		(t, f) => nodes[t.id] ? (i<1 ? f : _ => _)(nodes[t.id].v) : b(t))(t);
	out.run = w($(
		t => t,
		(t, f) => {
			const it = ([l, r]) => {
				l = unbox(f(l));
				if (!is.l(l)) {
					r = unbox(r);
					if (is.a(r)) r = box(it(r));
					return nary([nary(l), nary(r)]);
				}
				return unbox(out.subst(l, r))[1];
			};
			let _t;
			do t = unbox(it(_t = t));
			while (is.a(t) && !equ(_t)(t));
			return box(t);
		},
		_ => {debugger;throw''},
		(t, f) => {
			const n = nodes[t.id];
			if (n) {
				if (!n.e) {
					n.v = unbox(f(n.v));
					n.e = true;
				}
			} else return nary(t);
			return t;
		}));
	out.new = _;
	out.nodes = nodes;
	out.is = is;
	return (out.config = x => Object.assign(c, x) && out)(config)
}) => _)()();

const intrinsics = {};

const un_intrinsics = ['abs','sin','cos','tan','ceil','floor','random','trunc','exp','sqrt'];
const bin_intrinsics = ['min', 'max', 'log', 'pow'];
const misc_intrinsics = [['radians',a => a*Math.PI/180],['degrees',a => a/Math.PI*180]];

const vars = {}, history = [];
const builtinvars = { true: lambda('\\a b. a').value, false: lambda('\\a b. b').value, pi: Math.PI, E: Math.E };

const list = ['#help','#clear','#clearhistory','#export','#import','#vars','#builtin','#intrinsics','#rmfunc','#rmvar']
	.concat(Object.keys(builtinvars))
	.concat(un_intrinsics)
	.concat(bin_intrinsics)
	.concat(misc_intrinsics.map(x=>x[0]));

lambda.config({ ch: lambdach, f: (nary, n) => {
	const nul = nary(0), un = nary(1), bin = nary(2);
	const num = x => !isNaN(x), _ = _ => true;
	const tru = ['',['',1]], fls = ['',['',0]];
	const pair = (a,b) => ['',[[0,a],b]];
	const bool = b => b ? tru : fls;
	const math = (s, f) => f(([,...a]) => Math[s](...a), s, num);
	const numop = (o, f) => bin(([a,,b]) => f(a*1,b*1), num, o, num);
	const boolop = (o, f) => bin(([a,,b]) => bool(f(a,b)), _, o, _);
	const viewop = (s, p, n) => un(([,a]) => `${p}${(a*1).toString(n)}`, s);

un_intrinsics.forEach(x => intrinsics[x]=_=>math(x, un));
bin_intrinsics.forEach(x => intrinsics[x]=_=>math(x,bin));
misc_intrinsics.forEach(([k,v]) => intrinsics[k]=_=>un(([,a]) => v(a), k, num));

	return void 0
		?? nul(([a]) => Number(a), num)
		?? numop('+', (a,b) => a+b) ?? numop('-', (a,b) => a+b)
		?? numop('*', (a,b) => a+b) ?? numop('**', (a,b) => a**b)
		?? numop('^', (a,b) => a^b) ?? numop('&', (a,b) => a&b)
		?? numop('|', (a,b) => a|b)
		?? bin(([a,,b]) => a/b, num, '/', t => num(t) && t != 0)
		?? boolop('=', (a,b) => a===b) ?? boolop('!=', (a,b) => a!==b)
		?? boolop('<', (a,b) => a<b) ?? boolop('<=', (a,b) => a<=b)
		?? boolop('>', (a,b) => a>b) ?? boolop('>=', (a,b) => a>=b)
		?? boolop('&&', (a,b) => a&&b) ?? boolop('||', (a,b) => a||b)
		?? boolop('=>', (a,b) => !a||b)
		?? un(([,a]) => ~a, '~', num)
		?? bin(([a,,b]) => pair(a,b), _, ',', _)
		?? un(([a,b]) => `${a} ${b}`, t => t.startsWith?.('"') && !t.endsWith('"'), _)

		?? viewop('hex', '0x', 16) ?? viewop('dec', '', 10)
		?? viewop('oct', '0', 8) ?? viewop('bin', '0b', 2)
		
		?? bin(([a,,b]) => (list.push(a), vars[a] = b), _, ':=', _)
		?? nul(([a]) => vars[a], t => vars[t])
		?? Object.values(intrinsics).reduce((acc, x) => acc||x(), void 0)
		?? Object.keys(builtinvars).reduce((acc, x) => acc||nul(()=>builtinvars[x], x), void 0)
		//?? un('+', ([a]) => ['+',a], lambda.is.a)
		//?? nul('y', () => 'beef')
} });

let query = '', clear = true, res, next = new Promise(r => res = r), suggest;

const mv = (_x,_y,x=(_x<0?stdout.columns+_x:_x+1)+'',y=(_y<0?stdout.rows+_y:_y??'')+'') => y ? `\x1b[${y};${x}H` : `\x1b[${x}G`;
const color = (c = 0xffffff) => {
	const index = x => (x & 0xff) / 43 | 0;
	return `\x1b[38;5;${index(c >> 16) * 36 + index(c >> 8) * 6 + index(c) + 16}m`;
};
const resit = m => mv(0,-extrarows)+m;
const print = m => console.error(m,'\n'.repeat(extrarows));
if (!extrarows)
	process.exit(interp(query =
		process.argv.slice(2).join(' ')+' '+(stdin.isTTY ? '' : await stdin.toArray().then(x => x.toString()))));

console.clear(); w(resit(''));
const emu = x => (w((query = x, `${resit('')}> ${x}\n`)),interp(x));
try { fs.readFileSync('.calc', 'utf-8').split('\n').filter(x => x).forEach(emu); } catch (e) {}
const closeHandler = () => { fs.writeFileSync('.calc', history.join('\n')); process.exit(); };
process.on('SIGTERM', closeHandler); process.on('exit', closeHandler);

stdin.setRawMode(true);
stdin.resume();
let oquery = '', oxi, xi = 0, yi = 0, ti = -1;
const prompt = (e = '') => w(resit(`\x1b[J> ${query}\n${(() => {
	if (ti === -1) return '';
	let out = '';
	for (let i = 0; i < suggest.length; ++i) {
		if (i === ti) out += `\x1b[7m`;
		out += ` ${suggest[i]} `;
		if (i === ti) out += `\x1b[27m`;
	}
	return out;
})()}${e}${mv(xi+2,-extrarows)}`));
stdin.on('data', data => {
	let key = data.toString('utf-8');
	if (data[0] === 0x1b) {
		const d = Array.from(data).slice(1).map(x => x.toString(16)).join('');
		key = {
			'5b41': 'uparrow', '5b42': 'downarrow', '5b43': 'rightarrow', '5b44': 'leftarrow', '': 'escape'
		}[d];
		if (key === undefined) console.error(data, d);
	}
	const xc = d => xi = (ti = -1, Math.min(query.length, Math.max(0, xi + d)));
	const yc = d => {
		if (!yi && d > 0) oquery = query;
		yi = Math.min(history.length, Math.max(0, yi + d));
		if (!yi) query = oquery;
		else query = history[history.length - yi];
		xi = query.length;
		ti = -1;
	};
	const tc = () => (++ti, ti %= suggest.length);
	const r = x => (x+'').split('').reverse().join('');
	const word = () => r(r(query.slice(0, xi)).match(/[0-9a-zA-Z_#]*/));
	const repl = (a,b) => query = r(r(query).replace(r(a), r(b)));
	const replword = (a,b) => { repl(a,b); ti = -1; xi = query.length; };
	if (key === '\\') key = lambdach;
	switch (key) {
		case 'escape': ti = -1; break;
		case 'uparrow': yc(1); break; case 'downarrow': yc(-1); break;
		case 'leftarrow': xc(-1); break; case 'rightarrow': xc(1); break;
		case '\x03': process.exit();
		case '\t': {
			const s = word();
			if (ti == -1) {
				let ll = extrarows * stdout.columns;
				suggest = list.filter(x => x.startsWith(s)).filter(x => ll > 0 ? (ll -= x.length + 2, true) : 0);
				if (suggest.length === 1) { replword(s, suggest[0]); break; }
				else if (suggest.length === 0) break;
			}
			tc();
			query = repl(s, suggest[ti]);
			xi += suggest[ti].length - s.length;
			break;
		}
		case '\x7f': query = query.slice(0,xc(-1)) + query.slice(xi+1); ti = -1; break;
		case '\n': case '\r': oxi = xi; xi = yi = 0; ti = -1; prompt(); w('\n'); res(); return;
		default: query = query.substr(0, xi) + key + query.substr(xi++); w(key); ti = -1; break;
	}
	prompt();
});

function formatpairs(pairs) {
	const maxlen = Math.max(...pairs.map(x => x[0].length));
	return pairs.map(([k,v]) => `${k}${mv(maxlen)} : ${v}`).join('\n');
}

if (!history.length) print('Type #help for more information');

function interp() {
	query = query.trim();
	if (!query) return;
	let addhist = true;
	const params = (s) => {
		const t = query.split(' ');
		if (t.length === 1) print(`${s} requires a parameter`);
		return t.slice(1);
	};
	const c = s => query.startsWith(s);
	if (query === '#') process.exit();
	try { switch (true) {
		case c('#help'): print(`
#help						Bring up this info
#clear					Clear the screen
#clearhistory		Clear the history
#export file		Export variables
#import file		Import variables
#builtin				List builtin variables
#vars						List variables
#intrinsics			List intrinsic functions
#rmvar					Remove variable
(*TODO :: Fixup stringification for nested lambdas (not pulling from node v) *)
`);
			break;
		case c('#rmvar'): { const f = params('#rmvar')[0]; if (vars[f]) delete vars[f]; print(f); break }
		case c('#builtin'): print(formatpairs(Object.entries(builtinvars).map(([k,v]) => [k,lambda.str(v)]))); break;
		case c('#vars'): print(formatpairs(Object.entries(vars).map(([k,v]) => [k, lambda.str(v)]))); break;
		case c('#intrinsics'): print(formatpairs(Object.keys(intrinsics).map(k => [k,'']))); break;
		case c('#clearhistory'): emu('#export ""'); history.length = 0; emu('#import ""'); emu('#clear'); addhist = false; break;
		case c('#clear'): console.clear(); break;
		case c('#export'): {
			const qs = Object.entries(vars).map(([k,v]) => `${k} := ${str(v.value, void 0, '')}`);
			fs.writeFileSync(`${params('#export')[0]}.calc`, qs.join('\n'));
			w('\n');
			addhist = false;
			break;
		}
		case c('#import'): {
			const hist = fs.readFileSync(`${params('#import')[0]}.calc`, 'utf-8').split('\n').filter(x => !history.includes(x));
			hist.forEach(emu);
			addhist = false;
			break;
		}
		case c('#eval'): print(eval(query.slice('#eval'.length))); break;
		default: 
			try {
				const v = lambda(query);
				const c = 0xffff00;
				const s = v.toString();
				print(`${color(c)}${s}${color()}`);
			} catch (e) { ti = -1; xi = oxi; prompt(e); clear = addhist = false; }
	}
	if (addhist) history.push(query);
	} catch (e) {}
}

while(1) { if (clear) { query = ''; prompt(); } clear = true; await next; next = new Promise(r => res = r); interp(); }
